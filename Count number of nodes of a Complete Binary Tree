You are given a complete binary tree with unknown number of nodes. You need to find the number of nodes the tree have.
You are given a function countNodes() which has root pointer as parameter and you need to complete the function.

Input:
First line of input contains the number of test cases T. For each test case, there will be only a single line of input which is a string representing the tree as described below: 

The values in the string are in the order of level order traversal of the tree where, numbers denotes node values, and a character “N” denotes NULL child.

For example:



For the above tree, the string will be: 1 2 3 N N 4 6 N 5 N N 7 N
Output:
For each test case, print the number of nodes the tree have in new line.
Your Task:
You need to complete the function countNodes().
Constraints:
1 <= T <= 100
1 <= Number of Nodes <= 105
1 <= Data on Node <= 103
Example:
Input:
2
1 2 3 4 5 6
10 20 48 2 40 29 92
Output:
6
7

Explanation:
Test Case 1:                                                     1
                                                                      /         \
                                                                    2            3
                                                                 /      \        /
                                                              4         5    6
Number of nodes is 6.
Test Case 2:                                                            10
                                                                             /          \
                                                                           20          48
                                                                        /       \       /     \
                                                                      2       40   29     92
Number of nodes is 7.



Solution:

// calculate depth of the tree
// only recur to left as the tree is complete binary tree
int depth(Node *root) {
    if (!root)
        return 0;
    return 1 + depth(root->left);
}

/*
 * function to check if the node mid is present or not
 *
 * root: root pointer of the tree
 * mid: node that need to check
 * d: max depth
 */
bool midExists(Node *root, int mid, int d) {
    // initialize lower and upper bound of number of nodes at the last level
    int l = 0;
    int r = pow(2, d) - 1;

    // search for the existence of node mid
    for (int i = 0; i < d; i++) {
        // m is the last node that is present in the left of current root
        int m = (l + r) / 2;

        // if mid is less or equal to m then mid can present in left subtree
        if (mid <= m) {
            root = root->left;
            r = m;
        } else {    // other wise present in right subtree
            root = root->right;
            l = m;
        }
    }
    // last check if the node mid is present or not
    if (!root)
        return false;

    return true;
}

int countNodes(Node *root) {
    int d = depth(root) - 1;
    // if depth is 0 then only root exists
    if (d == 0)
        return 1;

    // initialize lower and upper bound
    int l = 1;
    int r = pow(2, d) - 1;
    // binary search on the number of nodes
    while (l <= r) {
        int mid = (l + r) / 2;

        if (midExists(root, mid, d)) {
            l = mid + 1;
        } else
            r = mid - 1;
    }

    return pow(2, d) - 1 + l;
}
