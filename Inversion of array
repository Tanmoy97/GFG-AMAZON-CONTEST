Given an array arr[] of N integers. Find the Inversion Count in the array. 

Inversion Count: For an array, inversion count indicates how far (or close) the array is from being sorted. If array is already sorted then the inversion count is 0. If an array is sorted in the reverse order then the inversion count is the maximum. 
Formally, two elements arr[i] and arr[j] form an inversion if arr[i] > arr[j] and i < j.
 

Example 1:

Input: N = 5, arr[] = {2, 4, 1, 3, 5}
Output: 3
Explanation: The sequence 2, 4, 1, 3, 5 
has three inversions (2, 1), (4, 1), (4, 3).
Example 2:

Input: N = 5
arr[] = {2, 3, 4, 5, 6}
Output: 0
Explanation: As the sequence is already 
sorted so there is no inversion count.
Example 3:

Input: N = 3, arr[] = {10, 10, 10}
Output: 0
Explanation: As all the elements of array 
are same, so there is no inversion count.
Your Task:
You don't need to read input or print anything. Your task is to complete the function inversionCount() which takes the array arr[] and N (the size of the array) as input parameters and returns the inversion count of the given array.

Expected Time Complexity: O(NLogN)
Expected Auxiliary Space: O(N)

Constraints:
1 â‰¤ N â‰¤ 107
1 â‰¤ arr[i] â‰¤ 1018




Solution:

// counter to keep the count of inversion
long long my_counter = 0;

// Function to merge two parts of array
// p: initial point in the array, say left index
// q: mid point
// r: higher range
void merge(long long a[], long long p, long long q, long long r){
    long long l = q-p+1;
    long long a1[l];

    long long l2 = r-q;
    
    long long a2[l2];
    
    // storing elements on left half from a to a1
    for(long long i = 0;i<l;i++){
        a1[i] = a[i+p];
    }
    
    // storing elements on right half from a to a2
    for(long long i = 0;i<l2;i++){
        a2[i] = a[q+i+1];
    }
    
    long long left = 0, right = 0, k = p;
    
    // merge while indexes are valid
    while(left < l && right < l2)
    {
        // comparing element of a1 and a2
        // and accordingly storing in a
        if(a1[left] <= a2[right]){
            a[k] = a1[left];
            left++;
        }
        else{
            a[k] = a2[right];
            right++;
            
            // add the inversions that cross between 
            // the first half and second half
            my_counter += (l-left); // Increementing counter
        }
        k++;
    }
    
    // store the rest elements
    while(left < l){
        a[k++] = a1[left++];
      
    }
    
    // store the rest elements 
    while(right < l2){
        
        a[k++] = a2[right++];
    }
}

// Function to mergesort a[], which use 
// divide and conquer for left and right mergesort
// operation
void mergeSort(long long a[], long long p, long long r)
{
    
    if(p < r)
    {
        // mid
        long long q = (p+r)/2;
        
        // calling for left half
        mergeSort(a, p, q);
        
        // calling for right half
        mergeSort(a, q+1, r);
        
        // after sorting, need to call merge funtion
        merge(a, p, q, r);
    }
}

// base function which calls the other utility function
// to find the number of inversions
long long int inversionCount(long long A[],long long N)
{
    mergeSort(A,0,N-1);
    long long int res = my_counter;
    my_counter = 0;
    return res;
}
