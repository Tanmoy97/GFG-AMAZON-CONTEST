A 100m race was held between n people. You are given p pairs of names of runners. A pair ("abc", "xyz") symbolises that, runner with name "abc" finished the race before runner "xyz".

Find the complete order in which the runners finished the race. Assume that the given information is sufficient to find the order.

Input: First line of input contains number of test cases T. Then T test cases follow. In each test case, first line contains 2 space separated integers n and p. Each of the next p lines contains a pair of names (separated by space). Input will be read by driver code.

Output: Output should be the names of the n runners in the order in which they finished the race. Names shoud be separated by spaces.

Your Task: Your task is to complete the function print_order(). This function takes the value n and the vector containing the pairs of names as argument, and prints the n names in the order in which the runners finished the race. Names shoud be separated by spaces. Do not endline.

Constraints:
T <= 100
2 <= n <= 1000
n-1 <= p <= 4000

Example:
Input:
1
5 8
ney benz
bale ron
ron benz
bale ney
leo ney
leo benz
ron ney
ron leo

Output:
bale ron leo ney benz

Solution:

void traverse_graph(int i, vector<int> graph[], string get_name[],
                    int* ancestors) {
                        
    if (ancestors[i] > 1) {
        // if there is any ancestor present of the particular node decrement it as it contributed its answer now we don't have to traverse it again
        ancestors[i]--;
        return;
    }
    cout << get_name[i] << " ";

    for (int j = 0; j < graph[i].size(); j++){
        // doing dfs call for other child of node i.
        traverse_graph(graph[i][j], graph, get_name, ancestors);
    }
        
}

void print_order(vector<pair<string, string> >& info, int n) {
    unordered_map<string, int>
        indexes;         // map returns index corresponding to name
    int names_found = 0; // index to be assigned to next name that is found
    string get_name[n];  // returns name corresponding to given index
    int* ancestors = new int[n](); // immediate ancestors of any graph element

    vector<int> graph[n];
    // creating graph :-
    for (int i = 0; i < info.size(); i++) {
        string name = info[i].first;
        
        for (int j = 0; j < 2; j++) {
            if (indexes.find(name) == indexes.end()) {
                // assigning index to new name
                if (names_found == n) {
                    cout << "bad_input";
                    return;
                }
                indexes[name] = names_found;
                get_name[names_found] = name;
                names_found++;
            }
            name = info[i].second;
        }
        
        int i1 = indexes[info[i].first];// index correspond to first string
        int i2 = indexes[info[i].second];// index correspond to second string

        graph[i1].push_back(i2);
        ancestors[i2]++; // immediate ancestor of i2 is i1 so we have incremented it.
        
    }

    for (int i = 0; i < n; i++)
        if (ancestors[i] == 0) {
            // Traversing graph for all the node that has ancestors.
            traverse_graph(i, graph, get_name, ancestors);
            return;
        }
}
