Given an array arr[] of strings, the task is to find the strings from the array which are not prefix of any other string from the same array.
Note: There is no i,j such that i

 

Example 1:

Input: 
arr[] = {“apple”, “app”, “there”, “the”, “like”}
Output:
apple
like
there
Explanation:
Here “app” is a prefix of “apple”
Hence, it is not printed and
“the” is a prefix of “there”

Example 2:

Input: 
arr[] = {“a”, “aa”, “aaa”, “aaaa”}
Output:
aaaa

Expected Time Complexity: O(Sum of length of all arr[i])
Expected Auxiliary Space: O(Sum of length of all arr[i])

Your Task: 
You don't need to read input or print anything. Your task is to complete the function solve() which takes N (number of elements in arr[]) and arr[] as input parameters and returns an array of strings containing the required answer in lexicographical order.

 

Constraints:
1 <= N <= 1e5
1 <= lenght(arr[i]) <= 1e4
1 <= Sum of length of all arr[i] <= 1e6



Solution:

class Solution{   
public:
    struct node
    {
      struct node * link[26];
      node()
      {
        for(int i=0;i<26;i++)
          link[i]=NULL;
      }
    };
    void insert(struct node *cur,int pos,string &s)
    {
      if(pos==s.size())
      {
        return;
      }
      if(cur->link[s[pos]-'a']==NULL)
      {
        cur->link[s[pos]-'a']=new node();
      }
      insert(cur->link[s[pos]-'a'],pos+1,s);
    }
    void dfs(struct node *cur,vector<string> &answer,string &tmp)
    {
      int leaf=1;
      for(int i=0;i<26;i++)
      {
        if(cur->link[i]==NULL)
          continue;
        leaf=0;
        tmp.push_back(char(i+'a'));
        dfs(cur->link[i],answer,tmp);
        tmp.pop_back();
      }
      if(leaf)
      {
        if(tmp.size())
        answer.push_back(tmp);
        return ;
      }
    }
    vector<string> solve(int N,vector<string> arr){
      node *root=new node();
      vector<string> answer;
      for(auto i:arr)
      {
        insert(root,0,i);
      }
      string tmp="";
      dfs(root,answer,tmp);
      return answer;
    }
};
