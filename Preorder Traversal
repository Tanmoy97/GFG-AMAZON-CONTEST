Given a binary tree, find its preorder traversal.

Example 1:

Input:
        1      
      /          
    4    
  /    \   
4       2
Output: 1 4 4 2 
Example 2:

Input:
       6
     /   \
    3     2
     \   / 
      1 2
Output: 6 3 1 2 2 

Your Task:
You don't need to read input or print anything. You just have to complete the function preorder() which takes the root node of the tree as input parameter and returns a list of integers containing the preorder traversal of the tree.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(N)

Constraints:
1 <= Number of nodes <= 10^4
1 <= Data of a node <= 10^5

Solution:

vector <int> preorder(Node* root)
{
  // Your code here
  vector<int> nodes;
nodes.push_back(root->data);
if(root->left!=NULL)
for(auto it: preorder(root->left))
nodes.push_back(it);
if(root->right!=NULL)
for(auto it: preorder(root->right))
nodes.push_back(it);

return nodes;
}
