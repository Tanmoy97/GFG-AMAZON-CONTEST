Given a Singly Linked List with N nodes and M random pointers, clone the link list.

ArbitLinked List1

Example 1:

Input:
N = 4, M = 2
value of link list = {1,2,3,4}
pairs of random pointers = {{1,2},{2,4}}
Output: 1
Explanation: 1 --> 2 --> 3 --> 4 --> NULL
Among these 4 nodes,  2 nodes have arbitrary pointers
from 1 to 2 and from 2 to 4. The arbitrary random 
pointer for 3 and 4 is initialised as NULL. The output 
is 1 when the Link List is copied successfully. 

Example 2:

Input:
N = 4, M = 2
value[] = {1,3,5,9}
pairs[] = {{1,1},{3,4}}
Output: 1
Explanation: 
1 --> 3 --> 5 --> 9 --> NULL
Among these 4 nodes,  2 nodes have arbitrary pointers
from 1 to 1 and from 3 to 4. The arbitrary random 
pointer for 2 and 4 is initialised as NULL. The output 
is 1 when the Link List is copied successfully. 

Your Task:
You don't need to read input or print anything. Complete the function copyList() that takes the head of the given Link List as input parameter, copies it into a new Link List and then returns the head of the copied list.
NOTE : If their is any node whose arbitrary random pointer is not given then its by default null.


Expected Time Complexity : O(N)
Expected Auxilliary Space : O(1)


Constraints:
1 <= N <= 100
1 <= M <= N

Solution:

Node *copyList(Node *head) {
    int c=0;
    unordered_map<Node*,Node*> m;
    Node**  Head;
    while(head!=NULL){
        m[head]=new Node(head->data);
        if(c==0){
            Head=&m[head];
        }
        c++;
        //cout<<"my add is "<<m[head]<<endl;
        head=head->next;
        //count++;
    }
    unordered_map<Node*,Node*>::iterator itr;
    for(itr=m.begin();itr!=m.end();itr++){
        if(itr->first->next!=NULL)
            itr->second->next=m[itr->first->next];
        if(itr->first->arb!=NULL)
            itr->second->arb=m[itr->first->arb];
        //cout<<"address is "<<itr->second<<endl;    
    }
    return *Head;
}
